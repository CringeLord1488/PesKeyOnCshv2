using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace PasswordManagerApp.Utils;

public static class AesEncryption
{
    // üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—è
    private static byte[] DeriveKeyFromPassword(string masterPassword)
    {
        byte[] salt = Encoding.UTF8.GetBytes("your-salt-here"); // –ù–µ –º–µ–Ω—è–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞!
        using var deriveBytes = new Rfc2898DeriveBytes(masterPassword, salt, 10000, HashAlgorithmName.SHA512);
        return deriveBytes.GetBytes(32); // 32 –±–∞–π—Ç–∞ –¥–ª—è AES-256
    }

    // üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å)
    public static string Encrypt(string plainText, string masterPassword)
    {
        byte[] key = DeriveKeyFromPassword(masterPassword); // ‚úÖ –¢–µ–ø–µ—Ä—å masterPassword –ø–µ—Ä–µ–¥–∞–Ω
        byte[] iv = new byte[16]; // –ù–æ–≤—ã–π IV –ø—Ä–∏ –∫–∞–∂–¥–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏

        using var aes = Aes.Create();
        aes.Key = key;
        aes.IV = iv;

        var encryptor = aes.CreateEncryptor(aes.Key, aes.IV);

        using var ms = new MemoryStream();
        using var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write);
        using var sw = new StreamWriter(cs);

        sw.Write(plainText);
        sw.Flush();
        cs.FlushFinalBlock();

        byte[] encryptedData = ms.ToArray();
        byte[] combined = new byte[iv.Length + encryptedData.Length];

        Buffer.BlockCopy(iv, 0, combined, 0, iv.Length);
        Buffer.BlockCopy(encryptedData, 0, combined, iv.Length, encryptedData.Length);

        return Convert.ToBase64String(combined);
    }

    // üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è (—Ç–æ–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å)
    public static string Decrypt(string cipherText, string masterPassword)
    {
        try
        {
            byte[] fullCipher = Convert.FromBase64String(cipherText);

            byte[] iv = new byte[16];
            Buffer.BlockCopy(fullCipher, 0, iv, 0, iv.Length);

            byte[] encryptedData = new byte[fullCipher.Length - iv.Length];
            Buffer.BlockCopy(fullCipher, iv.Length, encryptedData, 0, encryptedData.Length);

            byte[] key = DeriveKeyFromPassword(masterPassword); // ‚úÖ –¢–µ–ø–µ—Ä—å masterPassword –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            using var aes = Aes.Create();
            aes.Key = key;
            aes.IV = iv;

            var decryptor = aes.CreateDecryptor(aes.Key, aes.IV);

            using var ms = new MemoryStream(encryptedData);
            using var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read);
            using var sr = new StreamReader(cs);

            return sr.ReadToEnd();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: {ex.Message}");
            return "[–û—à–∏–±–∫–∞]";
        }
    }
}